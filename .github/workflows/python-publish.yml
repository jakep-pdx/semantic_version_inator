name: Build semantic_version_inator

on:
  push:
    branches:
      - "main"
  workflow_dispatch:
    inputs:
      publishPackage:
        description: Publish Package
        required: true
        default: false
        type: boolean
      versionType:
        description: 'Version Type'
        required: true
        default: 'PATCH'
        type: choice
        options:
        - 'PATCH'
        - 'MINOR'
        - 'MAJOR'

# TBD - possibly also create a tag with the version number to use as release, or possibly move 
# publish to pypi step as separate workflow which triggers off release or ???
# 
# from example github python publish workflow:

#   release:
#     types: [published]

# permissions:
#   contents: read

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        path: semantic_version_inator
    
    - name: set vars
      run: |
        publishPackage="false"
        if [ "${{ github.event.inputs.publishPackage }}" != "" ]
        then
          publishPackage="${{ github.event.inputs.publishPackage }}"
        fi
        echo "publishPackage=$publishPackage" >> $GITHUB_ENV

        versionType="PATCH"
        if [ "${{ github.event.inputs.versionType }}" != "" ]
        then
          versionType="${{ github.event.inputs.versionType }}"
        fi
        echo "versionType=$versionType" >> $GITHUB_ENV

    - name: check vars
      run: |
        echo "publishPackage: ${{ env.publishPackage }}"
        echo "versionType: ${{ env.versionType }}"

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f semantic_version_inator/requirements-dev.txt ]; then pip install -r semantic_version_inator/requirements-dev.txt; fi

    - name: Run pylint
      run: |
        pylint semantic_version_inator/semantic_version_inator --fail-under=8

    - name: Run pytest
      run: |
        pytest semantic_version_inator --cov-report=html --cov-branch --cov=.

    - name: Check coverage
      run: |
        coverage report --fail-under=80 --omit="setup.py,*/__init__.py,*/tests/*"

    - name: Get next version
      continue-on-error: true
      run: |
        pip download semantic_version_inator
        file_name=$(ls semantic_version_inator*.whl)
        if [ "$file_name" != "" ]
          then
          pip install $file_name
          new_ver=$(get_next_ver_file_name $file_name ${{ env.versionType }})
          echo "new_ver: "$new_ver
          echo "new_ver=$new_ver" >> $GITHUB_ENV
        else
          echo "unable to get next version"
        fi

    - name: Build package
      run: |
        cd semantic_version_inator
        python -m build --wheel

    - name: Publish package to pypi
      if: ${{ env.publishPackage == 'true' }}
      uses: pypa/gh-action-pypi-publish@release/v1.5
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: semantic_version_inator/dist
